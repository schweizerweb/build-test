name: Release for multiple platforms

on:
  push:
    tags:
    - '[0-9]+.[0-9]+.[0-9]+'
    - '[0-9]+.[0-9]+.[0-9]+.[0-9]+'

  workflow_dispatch:
    inputs:
      version:
        description: Release Version
        default: 0.0.0.1
        required: true  

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      hasTweak: ${{ steps.get_version.outputs.HASTWEAK }}
    steps:
        - name: Get the version
          id: get_version
          shell: bash
          run: |
            [ "${{github.event_name}}" == "workflow_dispatch" ] && v=${{github.event.inputs.version}} || v=${GITHUB_REF/refs\/tags\//}
            va=${v}
            hasTweak={va~='[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'}
            echo "HASTWEAK=${hasTweak}" >> "$GITHUB_OUTPUT" 
            echo "VERSION=${va}" >> "$GITHUB_OUTPUT"  

  build:
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false

      # build on
      # Windows: cl
      # MacOS: clang/clang++
      # Ubuntu: clang/clang++
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            name: Windows
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            name: Linux
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
            name: macOS
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - if: ${{ runner.os == 'macOS' }}
      name: Install packagesbuild
      shell: bash
      run: |
        wget http://s.sudre.free.fr/Software/files/Packages.dmg
        hdiutil attach Packages.dmg -mountpoint "/Volumes/PackagesTmp"
        sudo installer -package "/Volumes/PackagesTmp/Install Packages.pkg" -target /
        hdiutil detach /Volumes/PackagesTmp

    - name: Build Installer
      shell: bash
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ../Setup/build_installer.sh -p ${{ matrix.name }} -t "0.0.1" -n "ICST_AmbiPlugins_${{ matrix.name }}_0.0.1"

    - if: ${{ runner.os == 'Windows' }}
      name: echo win
      shell: bash
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: cat win64_temp.iss

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.name }}
        path: ${{ steps.strings.outputs.build-output-dir }}/packages/*

  publish:
    name: Publish Release
    needs: [prepare, build]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Download artiacts
        uses: actions/download-artifact@v3
        with:
          path: allartifacts
  
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.prepare.outputs.version }}
          prerelease: ${{ needs.prepare.outputs.hasTweak }}
          files: |
            allartifacts/*/*
      